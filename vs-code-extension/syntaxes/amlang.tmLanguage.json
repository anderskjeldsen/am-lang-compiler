{
  "scopeName": "source.amlang",
  "name": "AmLang",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#class"
    },
    {
      "include": "#function"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {"include": "#function-calls"}
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.amlang",
          "match": "//.*$"
        },
        {
          "name": "comment.block.amlang",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.amlang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.amlang",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.amlang",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.amlang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.amlang",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.amlang",
          "match": "\\b\\d+\\.\\d+(?:[eE][\\+\\-]?\\d+)?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.amlang",
          "match": "\\b(if|else|for|while|break|continue|each|try|catch|finally|throw|return|susp|new|nameof|as|is|switch|case|default)\\b"
        },
        {
          "name": "keyword.declaration.amlang",
          "match": "\\b(namespace|class|interface|enum|import|static|var|const|fun|public|private|native|const|abstract|open|override)\\b"
        },
        {
          "name": "constant.language.amlang",
          "match": "\\b(true|false|null|this|base)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.amlang",
          "match": "\\b(Bool|Byte|UByte|Short|UShort|Int|UInt|Long|ULong|Float|Double|String|Any|Object|void)\\b"
        },
        {
          "name": "storage.type.array.amlang",
          "match": "\\b([A-Z][A-Za-z0-9_]*)(\\[\\])"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "begin": "\\bimport\\s+",
          "beginCaptures": {
            "0": {
              "name": "keyword.declaration.import.amlang"
            }
          },
          "end": "$",
          "patterns": [
            {
              "name": "support.namespace.amlang",
              "match": "\\b[A-Z][A-Za-z0-9_]*(?:\\.[A-Z][A-Za-z0-9_]*)*\\b"
            }
          ]
        }
      ]
    },
    "class": {
      "patterns": [
        {
          "begin": "\\bclass\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "0": {
              "name": "keyword.declaration.class.amlang"
            },
            "1": {
              "name": "entity.name.type.class.amlang"
            }
          },
          "end": "(?=\\{)"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "begin": "\\bfun\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "0": {
              "name": "keyword.declaration.function.amlang"
            },
            "1": {
              "name": "entity.name.function.amlang"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "name": "variable.parameter.amlang",
              "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s*:)"
            },
            {
              "name": "storage.type.parameter.amlang",
              "match": ":(?=\\s*[A-Za-z_][A-Za-z0-9_\\[\\]]*)"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "begin": "\\bvar\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "0": {
              "name": "keyword.declaration.variable.amlang"
            },
            "1": {
              "name": "variable.other.declaration.amlang"
            }
          },
          "end": "(?=;|=|\\)|,|$)",
          "patterns": [
            {
              "name": "storage.type.variable.amlang",
              "match": ":(?=\\s*[A-Za-z_][A-Za-z0-9_\\[\\]]*)"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.amlang",
          "match": "(\\+\\+|\\-\\-|\\+|\\-|\\*|\\/|%|==|!=|<=|>=|<|>|&&|\\|\\||!|=)"
        },
        {
          "name": "punctuation.separator.comma.amlang",
          "match": ","
        },
        {
          "name": "punctuation.terminator.statement.amlang",
          "match": ";"
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": { "name": "entity.name.function.call.amlang" }
          }
        }
      ]
    }
  }
}
